//=====================================================================
//文件名称：uart.h
//功能概要：UART底层驱动构件头文件
//版权所有：苏州大学嵌入式系统与物联网研究所(sumcu.suda.edu.cn)
//更新记录：2022-01-25 V2.0  LCT
//适用芯片：CH32V307VCT6
//=====================================================================

#ifndef __UART_H
#define __UART_H

#include "string.h"
#include "ch32v30x.h"

//系统时钟
#define SYSCLK_FREQ_72MHz  (uint32_t)72000000

//宏定义串口号
#define UART_1    1
#define UART_2    2
#define UART_3    3
#define UART_4    4
#define UART_5    5
#define UART_6    6
#define UART_7    7
#define UART_8    8

//配置UARTx使用的引脚组(TX,RX)0
//UART_1的引脚组配置：0:PTA9~10,1:PTB6~7
#define UART1_GROUP    0
//UART_2的引脚组配置：0:PTA2~3
#define UART2_GROUP    0
//UART_3的引脚组配置：0:PTB10~11,1:PTC10~11
#define UART3_GROUP    0

//UART_4的引脚组配置：0:PTC10~11,1:PB0~1, 2:PTE0~1
#define UART4_GROUP    0

//UART_5的引脚组配置：0:PTC12~PTD2,1:PTB4~5, 2:PTE8~PTE9
#define UART5_GROUP    0

//UART_6的引脚组配置：0:PTC0~1,1:PTB8~9, 2:PTE10~11
#define UART6_GROUP    0

//UART_7的引脚组配置：0:PTC2~3,1:PTA6~7, 2:PTE12~13,
#define UART7_GROUP    0

//UART_8的引脚组配置：0:PTC4~5,1:PTA14~15, 2:PTE14~15
#define UART8_GROUP    0

//GPIO时钟
#define  RCC_IOPEEN                      ((uint32_t)0x00000040)

//USART时钟使能
#define RCC_USART3EN   ((uint32_t)0x00040000)
#define RCC_UART4EN    ((uint32_t)0x00080000)
#define RCC_UART5EN    ((uint32_t)0x00100000)
#define RCC_UART6EN    ((uint32_t)0x00000040)
#define RCC_UART7EN    ((uint32_t)0x00000080)
#define RCC_UART8EN    ((uint32_t)0x00000100)
//=======================函数注释区=======================================
//=====================================================================
//函数名称：uart_init
//功能概要：初始化uart模块
//参数说明：uartNo:串口号：UART_1、UART_2、UART_3
//          baud:波特率：300、600、1200、2400、4800、9600、19200、115200...
//函数返回：无
//=====================================================================
void uart_init(uint8_t uartNo, uint32_t baud_rate);

//=====================================================================
//函数名称：uart_send1
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//          ch:要发送的字节
//函数返回：函数执行状态：1=发送成功；0=发送失败。
//功能概要：串行发送1个字节
//=====================================================================
uint8_t uart_send1(uint8_t uartNo, uint8_t ch);

//=====================================================================
//函数名称：uart_sendN
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//         buff: 发送缓冲区
//         len:发送长度
//函数返回： 函数执行状态：1=发送成功；0=发送失败
//功能概要：串行 接收n个字节
//=====================================================================
uint8_t uart_sendN(uint8_t uartNo ,uint16_t len ,uint8_t* buff);

 //=====================================================================
//函数名称：uart_send_string
//参数说明：uartNo:UART模块号:UART_1、UART_2、UART_3
//                  buff:要发送的字符串的首地址
//函数返回： 函数执行状态：1=发送成功；0=发送失败
//功能概要：从指定UART端口发送一个以'\0'结束的字符串
 //=====================================================================
uint8_t uart_send_string(uint8_t uartNo, uint8_t *buff);

 //=====================================================================
//函数名称：uart_re1
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//        *fp:接收成功标志的指针:*fp=1:接收成功；*fp=0:接收失败
//函数返回：接收返回字节
//功能概要：串行接收1个字节
 //=====================================================================
uint8_t uart_re1(uint8_t uartNo,uint8_t *fp);

 //=====================================================================
//函数名称：uart_reN
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//          buff: 接收缓冲区
//          len:接收长度
//函数返回：函数执行状态 1=接收成功;0=接收失败
//功能概要：串行 接收n个字节,放入buff中
 //=====================================================================
uint8_t uart_reN(uint8_t uartNo ,uint16_t len ,uint8_t *buff);

 //=====================================================================
//函数名称：uart_enable_re_int
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//函数返回：无
//功能概要：开串口接收中断
 //=====================================================================
void uart_enable_re_int(uint8_t uartNo);

 //=====================================================================
//函数名称：uart_disable_re_int
//参数说明：uartNo: 串口号 :UART_1、UART_2、UART_3
//函数返回：无
//功能概要：关串口接收中断
 //=====================================================================
void uart_disable_re_int(uint8_t uartNo);

 //=====================================================================
//函数名称：uart_get_re_int
//参数说明：uartNo: 串口号 :UART_1、UART_2、UART_3
//函数返回：接收中断标志 1=有接收中断;0=无接收中断
//功能概要：获取串口接收中断标志,同时禁用发送中断
 //=====================================================================
uint8_t uart_get_re_int(uint8_t uartNo);

 //=====================================================================
//函数名称：uart_deinit
//参数说明：uartNo: 串口号 :UART_1、UART_2、UART_3
//函数返回：无
//功能概要：uart反初始化
 //=====================================================================
void uart_deinit(uint8_t uartNo);

//=======================函数注释区结束====================================

#endif /* __UART_H */
